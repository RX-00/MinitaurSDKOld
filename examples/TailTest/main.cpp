
#include <stdio.h>
#include <SDK.h>
#include <math.h>
#include <Motor.h>
#include <ReorientableBehavior.h>
#include "Interpolator.h"

#if defined(ROBOT_MINITAUR)
// Subject to change for individual robots
// const float motZeros[8] = {2.82, 3.435, 3.54, 3.076, 1.03, 3.08, 6.190, 1.493};
// const float motZeros[8] = {2.570, 3.167, 3.777, 3.853, 2.183, 1.556, .675, 2.679}; // RML Ellie
// const float motZeros[9] = {2.570, 3.167, 3.777, 3.853, 2.183, 1.556, .675, 2.679, 0.807}; // RML Ellie With Tail
// const float motZeros[8] = {0.631, 4.076, 1.852, 3.414, 1.817, 5.500, 1.078, 6.252}; //RML Odie
// const float motZeros[9] = {0.631, 4.076, 1.852, 3.414, 1.817, 5.500, 1.078, 6.252, 1.010}; //RML Odie with Tail
const float motZeros[1] = {1.010}; //RML Odie with just Tail

#endif


#define TIMESTEPS 41
#define MOTORS 1 
#define TAIL_MOT 0

char myData[32];
float* myData_buf = (float*)myData;

enum TBMode
{
	TB_SIT = 0,
	TB_STAND,
};

float times[TIMESTEPS] = {0.000000,0.004380,0.008760,0.013140,0.017520,0.021900,0.026280,0.030660,0.035040,0.039420,0.043800,0.048180,0.052560,0.056940,0.061320,0.065700,0.070080,0.074460,0.078840,0.083220,0.087600,0.091980,0.096360,0.100740,0.105120,0.109500,0.113880,0.118260,0.122640,0.127020,0.131400,0.135780,0.140160,0.144540,0.148920,0.153300,0.157680,0.162060,0.166440,0.170820,0.175200};
float pos[TIMESTEPS][MOTORS] = {{-0.373935},{-0.367745},{-0.357386},{-0.345451},{-0.333384},{-0.321793},{-0.311187},{-0.301673},{-0.294670},{-0.293397},{-0.297820},{-0.305374},{-0.313872},{-0.321110},{-0.326109},{-0.328570},{-0.329156},{-0.329327},{-0.330242},{-0.332754},{-0.338032},{-0.348065},{-0.362507},{-0.379041},{-0.396244},{-0.413399},{-0.429658},{-0.444182},{-0.455732},{-0.462555},{-0.463748},{-0.458485},{-0.448155},{-0.436301},{-0.424494},{-0.412720},{-0.401397},{-0.391266},{-0.383067},{-0.378332},{-0.375439}};
float vel[TIMESTEPS][MOTORS] = {{0.762020},{1.976937},{2.665385},{2.762126},{2.725703},{2.550439},{2.275954},{1.977104},{1.129221},{-0.453748},{-1.472134},{-1.904567},{-1.903541},{-1.398998},{-0.881230},{-0.295078},{-0.025102},{-0.088395},{-0.364573},{-0.835820},{-1.627610},{-2.873471},{-3.641132},{-3.879812},{-3.947030},{-3.849985},{-3.538411},{-3.034962},{-2.180155},{-0.925289},{0.391152},{1.896122},{2.704666},{2.704636},{2.683134},{2.664766},{2.477306},{2.120732},{1.594713},{0.719042},{0.753466}};
// float acc[TIMESTEPS][MOTORS] = {{87.523241,103.240157,12.469463,-207.115944,103.247751,87.283403,-206.813339,12.640331,-14.119863},{87.484393,103.306596,12.142097,-207.010095,103.314655,87.254781,-206.712208,12.303668,-14.077748},{58.212529,73.556776,10.297116,-186.756591,73.556710,58.262622,-186.761840,10.273401,-13.283402},{58.136308,73.569522,10.066365,-186.667561,73.567833,58.182923,-186.673366,10.048798,-13.247791},{57.278760,73.307577,10.321013,-186.140904,73.302734,57.277758,-186.136161,10.333099,-13.442685},{57.200714,73.316165,10.093639,-186.046658,73.311463,57.200635,-186.043150,10.107374,-13.407483},{56.307914,73.058649,10.331883,-185.441490,73.056315,56.307445,-185.438354,10.335834,-13.616681},{56.229997,73.064588,10.106119,-185.342827,73.062114,56.230141,-185.340409,10.111647,-13.581893},{55.299114,72.828456,10.382782,-184.785722,72.826584,55.294973,-184.781937,10.387245,-13.779499},{55.221128,72.831911,10.158748,-184.682413,72.829908,55.217838,-184.679028,10.163882,-13.745126},{54.348333,72.524773,10.399926,-184.094136,72.524128,54.342798,-184.091408,10.403953,-13.954554},{54.269995,72.525914,10.177878,-183.986168,72.525214,54.265476,-183.983487,10.181957,-13.920599},{53.371139,72.227553,10.474285,-183.468091,72.226290,53.364088,-183.464902,10.477122,-14.115940},{53.292599,72.226451,10.253735,-183.355127,72.225387,53.286796,-183.351665,10.256120,-14.082402},{52.320523,72.010542,10.539628,-182.786813,72.000423,52.311579,-182.783112,10.543272,-14.281749},{52.242563,72.007348,10.320587,-182.668707,71.997174,52.233815,-182.664455,10.323364,-14.248629},{51.401485,71.605112,10.565143,-182.093786,71.631654,51.420539,-182.106703,10.580627,-14.462738},{51.322746,71.599602,10.347344,-181.969863,71.626711,51.342688,-181.981790,10.362520,-14.430037},{50.460946,71.308375,10.641375,-181.434182,71.282072,50.418900,-181.350974,10.598244,-14.643642},{50.378199,71.298813,10.426660,-181.303250,71.277814,50.345013,-181.218614,10.384007,-14.611378},{56.253876,80.829104,22.368389,-190.314655,80.248745,55.846956,-189.819074,22.157648,-18.078295},{511.465184,827.151569,-676.198717,-2263.733089,827.117750,511.392423,-2263.721065,-676.187327,-3.330717},{647.665141,983.865691,-660.487462,-2137.392207,983.871756,647.659848,-2137.373375,-660.477077,-9.900202},{447.358017,671.790229,-347.976598,-1332.341358,671.794049,447.342376,-1332.323948,-347.963796,18.263602},{483.121989,711.010124,-336.286138,-1326.252441,710.992953,483.120510,-1326.254163,-336.277208,15.346731},{446.610695,636.641798,-120.509250,-956.498011,636.614490,446.637181,-956.500840,-120.484189,-58.751319},{447.680649,637.652994,-108.459543,-981.491659,637.680107,447.699439,-981.485560,-108.465346,-58.885397},{664.364616,940.933094,45.159380,-691.706108,940.930108,664.342155,-691.716061,45.177935,-104.629067},{609.656953,861.466563,55.041215,-717.991322,861.469048,609.640626,-717.986682,55.043541,-101.317602},{308.196498,400.919709,447.398988,-130.176331,400.909039,308.178503,-130.184706,447.397723,-348.045719},{216.609167,267.520409,460.477161,-121.564246,267.527657,216.612715,-121.563614,460.467843,-351.728937},{486.415435,662.002625,212.147031,6.364377,661.994780,486.440682,6.365283,212.149690,-108.268052},{367.267181,476.004994,211.596511,14.578649,476.001835,367.276717,14.580975,211.599495,-108.244181},{455.912288,591.218230,-8.617251,146.612957,591.212589,455.921874,146.607499,-8.646163,95.805639},{314.858626,364.289091,-14.295340,152.635523,364.288629,314.860258,152.626089,-14.322122,96.175239},{175.033232,141.824553,-72.524380,364.947297,141.835015,175.030862,365.005580,-72.363855,145.049578},{83.322396,-5.604368,-75.170450,372.615242,-5.601800,83.314275,372.516682,-75.336097,141.238025},{-130.061714,-313.818518,1.073954,651.667497,-313.820852,-130.072978,652.008284,1.613602,47.299103},{-136.067026,-318.531193,-5.379529,659.969934,-318.543631,-136.084444,659.705758,-5.767747,42.139634},{-275.267098,-498.288837,101.074588,903.727502,-498.236947,-275.229929,904.443126,102.005455,-99.602512},{-238.885026,-434.035820,90.989196,906.418239,-434.016050,-238.866970,905.964088,90.451794,-103.352246},{-413.145921,-638.083119,318.825599,1248.432940,-638.261543,-413.297856,1249.545973,320.155191,-238.423054},{-17.774964,-215.414315,39.794510,84.756171,-215.271510,-17.482900,84.467922,39.786395,-23.989470},{-17.917808,-215.190655,39.807586,84.851494,-215.050979,-17.628938,84.567087,39.812229,-24.000079},{-7.362715,-188.986368,26.337040,66.800742,-188.993262,-7.405172,66.842538,26.349613,-15.108204},{-7.461523,-188.799286,26.347449,66.845806,-188.804541,-7.498615,66.881776,26.353518,-15.117315},{-7.159363,-188.240691,25.961096,67.261914,-188.238630,-7.156613,67.263380,25.952374,-14.941246},{-7.257126,-188.051551,25.966713,67.304905,-188.048384,-7.251944,67.304016,25.957885,-14.950122},{-7.110276,-187.321015,25.598021,67.750011,-187.321456,-7.110965,67.751703,25.590839,-14.721574},{-7.207172,-187.130479,25.601832,67.792322,-187.129629,-7.205407,67.792177,25.594645,-14.730225},{-6.975167,-186.447735,25.223440,68.151472,-186.447870,-6.972703,68.151131,25.221504,-14.515527},{-7.071607,-186.255700,25.225956,68.193464,-186.254561,-7.067107,68.191561,25.223439,-14.523953},{-6.871495,-185.543147,24.843883,68.564119,-185.543763,-6.869403,68.563838,24.843459,-14.302443},{-6.967397,-185.349656,24.844981,68.605854,-185.348977,-6.963442,68.604239,24.843762,-14.310646},{-6.842456,-184.555988,24.492057,68.947135,-184.554306,-6.839454,68.947320,24.491862,-14.061509},{-6.937346,-184.361167,24.491678,68.988700,-184.358157,-6.932559,68.987762,24.490679,-14.069494},{-6.713421,-183.690096,24.093136,69.446147,-183.686335,-6.709254,69.445835,24.093364,-13.869777},{-6.808366,-183.493634,24.091398,69.487340,-183.488325,-6.801904,69.486077,24.090881,-13.877546},{-6.522912,-182.855311,23.689242,69.881294,-182.879635,-6.539045,69.882487,23.688651,-13.693018},{-6.617886,-182.656602,23.686358,69.922183,-182.679475,-6.632438,69.922453,23.684937,-13.700572},{-6.550209,-181.836509,23.352189,70.280641,-181.808548,-6.553495,70.283693,23.351869,-13.440872},{-6.641858,-181.636681,23.348161,70.321743,-181.608916,-6.648631,70.323880,23.346660,-13.448238},{-11.208440,-197.635905,12.237508,70.953555,-197.339269,-11.083782,70.903087,12.266647,-18.172218},{-669.095697,-2093.453011,429.980374,303.956774,-2093.451550,-669.110762,303.929952,429.986210,-190.052074},{-666.175566,-1963.088275,594.381650,519.690701,-1963.090563,-666.181327,519.687806,594.377702,-181.981242},{-390.817579,-1245.986813,428.357752,385.393695,-1245.982354,-390.830425,385.388021,428.361638,-61.821217},{-396.112577,-1249.555607,521.956473,520.477681,-1249.557675,-396.115233,520.476649,521.958621,-56.208835},{-306.866907,-1115.912119,492.724435,518.381161,-1115.912702,-306.875519,518.379306,492.723791,19.935282},{-312.609227,-1174.203346,546.440911,605.121586,-1174.207248,-312.610596,605.126905,546.435118,23.306538},{-213.916452,-1069.904156,387.523159,437.946843,-1069.893254,-213.954537,437.941806,387.503180,113.063821},{-214.431282,-1162.565657,399.059907,464.886825,-1162.574305,-214.424417,464.889725,399.068517,112.352036},{82.688691,-655.935441,171.483791,223.454985,-655.929615,82.683016,223.458579,171.481643,275.690990},{97.444237,-693.369634,155.257553,215.469114,-693.367702,97.443635,215.470689,155.251700,274.303686},{551.589925,335.179837,391.032507,536.298848,335.182501,551.603162,536.343491,391.050881,343.059268},{561.589343,405.736620,349.079217,473.246320,405.738117,561.588286,473.221515,349.043229,342.152354},{501.316387,555.491047,1063.728536,1247.454477,555.491735,501.325794,1247.550301,1063.775093,8.294163},{499.949089,589.700850,939.932285,991.249188,589.701098,499.947393,991.186946,939.945219,-5.424535},{468.541548,821.718054,589.585878,480.810584,821.723034,468.549931,480.839715,589.556471,-2.118603},{456.909088,849.433419,404.192049,194.254515,849.424256,456.914241,194.268629,404.192477,-4.222941},{375.177230,1001.216980,290.130798,-9.399319,1001.235436,375.148122,-9.425349,290.103599,-103.246420},{361.856413,1019.281875,179.852875,-155.446400,1019.276127,361.903427,-155.459555,179.845608,-98.809734},{282.369511,1211.416460,20.684321,-309.400362,1211.391347,282.273472,-309.382164,20.717169,-106.194099},{269.824685,1212.757767,-11.364418,-323.036490,1212.699930,269.800385,-322.992416,-11.324573,-99.327394},{1045.617929,1892.944869,-281.911412,-475.555470,1893.216243,1045.825730,-475.749558,-282.238234,-73.313314}};
float u[TIMESTEPS][MOTORS] = {{0.839570},{0.839570},{0.075360},{0.075360},{-0.119106},{-0.119106},{-0.264266},{-0.264266},{-1.061210},{-1.061210},{-0.242519},{-0.242519},{0.386840},{0.386840},{0.406736},{0.406736},{-0.051462},{-0.051462},{-0.360029},{-0.360029},{-0.824277},{-0.824277},{-0.129576},{-0.129576},{0.120952},{0.120952},{0.433872},{0.433872},{0.944722},{0.944722},{1.034437},{1.034437},{0.023922},{0.023922},{-0.008543},{-0.008543},{-0.255002},{-0.255002},{-0.501710},{-0.501710},{0.817258}};

class TrajBound : public ReorientableBehavior
{
public:	

	Interpolator interp;

	TBMode mode = TB_SIT; //Current state within state-machine

	uint32_t tLast; //int used to store system time at various events

	float extDes;				 //The desired leg extension
	float angDes;				 // The desired leg angle
	float t;
	float test1;
	float test2;

	bool boolSlow = false;

	float posDes[MOTORS];
	float velDes[MOTORS];
	float accDes[MOTORS];
	float uDes[MOTORS];
	float df[MOTORS];
	float posAct;
	float velAct;
	float kp = 1;
	float kd = 0.025; // 0.02
	float kpt = 2;
	float kdt = 0.6; // 0.02
	float kpy = 0.1;//0.1;
	float kdy = 0;//0.05;
	float kiy = 0.02;
	float V = 16;
	float Ra = 0.23;
	float kt = 0.0954;
	float yawErrorInt = 0;

	float yawInit;
	float yawDes;
	float turnLeft;

	float finalTime = times[TIMESTEPS-1];


	//sig is mapped from remote; here, 3 corresponds to pushing the left stick to the right
	// which in turn forces the state machine into FH_LEAP
	void signal(uint32_t sig)
	{
		if(sig > 1)
		{
			tLast = S->millis;
		}
			
	}

	void begin()
	{
		mode = TB_STAND;			// Start behavior in STAND mode
		tLast = S->millis;		// Record the system time @ this transition
		yawInit = S->imu.euler.z;
		yawErrorInt = 0;
	}

	void update()
	{
		// if (isReorienting())
		// 	return;

		for (int j = 0; j < P->joints_count; j++)
	    {
	    	posDes[j] = 0;
	    	velDes[j] = 0;
	    	uDes[j] = 0;
	    	df[j] = 0;
	    }

		
		
		if (mode == TB_SIT)
		{
			C->mode = RobotCommand_Mode_JOINT;
			for (int i = 0; i < P->joints_count; i++)
			{
				posDes[i] = 0.5;
				// Splay angle for the front/rear legs (outward splay due to fore-displacement of front legs
				// and aft-displacement of rear legs)
				// The pitch angle (S->imu.euler.y) is subtracted since we want to the set the *absolute* leg angle
				// and limb[i].setPosition(ANGLE, *) will set the angle of the leg *relative* to the robot body
				
				if (i == TAIL_MOT)
				{
					posDes[i] = 0;
					joint[i].setGain(0.8, .003);
					joint[i].setPosition(posDes[i]);
				}else if(i==1 || i==3 || i==4 || i==6)
				{
					posDes[i] = posDes[i] - S->imu.euler.y;
				}else if(i==0 || i==2 || i==5 || i==7)
				{
					posDes[i] = posDes[i] + S->imu.euler.y;
				} 

				joint[i].setGain(0.8, .003);
				joint[i].setPosition(posDes[i]);
			}
		}
		else if (mode == TB_STAND)
		{
			C->mode = RobotCommand_Mode_JOINT;		

			t = 0.00001*(100*(S->millis - tLast) % (int)(100000*finalTime));

   		    interp.getMultipleCubicSplineInterp(pos,vel,times,t,posDes);
   		    interp.getMultipleLinearInterp(vel,times,t,velDes);
   		    interp.getMultipleZOH(u,times,t,uDes);
   		    // interp.getMultipleZOH(u,times,t,accDes);

			for (int i = 0; i < P->joints_count; i++)
			{
				yawDes = yawInit + 0;
				yawErrorInt = yawErrorInt + 0.001*(yawDes - S->imu.euler.z);
				// turnLeft = kpy*(yawDes - S->imu.euler.z) + kdy*(-S->imu.angular_velocity.z) + 0.1;
				turnLeft = -map(C->behavior.twist.angular.z, -1.0, 1.0, -0.1, 0.1) + 0.03;

				if((i==0 || i==2 || i==4 || i==6) && (i != TAIL_MOT))
				{
					posDes[i] = posDes[i] - turnLeft;
				} else if((i==1 || i==3 || i==5 || i==7) && (i != TAIL_MOT))
				{
					posDes[i] = posDes[i] + turnLeft;
				}

				posAct = joint[i].getPosition();
				velAct = joint[i].getVelocity();


				// uDes[i] = accDes[i]*0.5*0.5*0.4/(45*0.7);
				// df[i] = 1/(0.95*V)*(uDes[i]*Ra/kt + kt*joint[i].getVelocity());

				if (i == TAIL_MOT)
				{
					df[i] = 1/(0.95*V)*(uDes[i]*Ra/kt + kt*45*joint[i].getVelocity());
					joint[i].setOpenLoop(df[i] + kpt*(posDes[i] - posAct) + kdt*(velDes[i] - velAct));

				} else {
					// joint[i].setOpenLoop(df[i] + kp*(posDes[i] - posAct) + kd*(velDes[i] - velAct));
					joint[i].setOpenLoop(0.0);
				}
				
			}
		}
	}

	bool running()
	{
		return false;
	}
	void end()
	{
		mode = TB_SIT;
	}
};

TrajBound trajBound;

void debug()
{
	// printf("%d, ", trajBound.mode);
	// printf("Time: %4.3fs. ", trajBound.t);
	// printf("pos command: ");
	// for (int i = 0; i < P->joints_count; i++)
	// {
	// 	printf("%4.3f, ", joint[i].getOpenLoop());
	// }

	// printf("Pos: %4.3f, ", joint[TAIL_MOT].getPosition());
	// printf("Raw Pos: %4.3f, ",joint[TAIL_MOT].getRawPosition());
	
	// printf("%4.3f, %4.3f, %4.3f ", trajBound.yawInit,trajBound.turnLeft, trajBound.kiy*trajBound.yawErrorInt);
	// printf("\n");

	myData_buf[0] = joint[TAIL_MOT].getPosition();
	myData_buf[1] = joint[TAIL_MOT].getVelocity();
	myData_buf[2] = joint[TAIL_MOT].getOpenLoop();
	myData_buf[3] = trajBound.t;
	// write(LOGGER_FILENO, myData, 32);
}

int main(int argc, char *argv[])
{
#if defined(ROBOT_MINITAUR)
	init(RobotParams_Type_MINITAUR, argc, argv);

		// Set the joint type; see JointParams
	P->joints[TAIL_MOT].type = JointParams_Type_GRBL;

	// Set the *physical* address (e.g. etherCAT ID, PWM port, dynamixel ID, etc.)
	P->joints[TAIL_MOT].address = 9;

	// If there is a gearbox the joint electronics doesn't know about, this could be > 1.
	// Do not set to 0.
	P->joints[TAIL_MOT].gearRatio = 45.39;

	// Configure joints
	P->joints_count = S->joints_count = C->joints_count = MOTORS;
	for (int i = 0; i < P->joints_count; i++)
	{
		// Set zeros and directions
		P->joints[i].zero = motZeros[i]; //Add motor zeros from array at beginning of file
	}
	P->joints[TAIL_MOT].direction = 1;
		
#elif defined(ROBOT_MINITAUR_E)
	init(RobotParams_Type_MINITAUR_E, argc, argv);
	JoyType joyType = JoyType_FRSKY_XSR;
	ioctl(JOYSTICK_FILENO, IOCTL_CMD_JOYSTICK_SET_TYPE, &joyType);
#else
#error "Define robot type in preprocessor"
#endif


	// Uncomment to clear Bound and Walk behaviors
	// behaviors.clear();
	
	behaviors.push_back(&trajBound);
	if (!trajBound.boolSlow)
	{
		for (int i = 0; i<TIMESTEPS; ++i)
			{
				times[i] = 1*times[i];
			}
		trajBound.boolSlow = true;
	}

	setDebugRate(100);
	softStartEnable(false);

	SerialPortConfig cfg;
	cfg.baud = 115200;
	cfg.mode = SERIAL_8N1;
	ioctl(STDOUT_FILENO, IOCTL_CMD_SERIAL_PORT_CFG, &cfg);


	// Run
	return begin();
}
