
#include <stdio.h>
#include <SDK.h>
#include <math.h>
#include <Motor.h>
#include <ReorientableBehavior.h>
#include "Interpolator.h"

#if defined(ROBOT_MINITAUR)
// Subject to change for individual robots
// const float motZeros[8] = {2.82, 3.435, 3.54, 3.076, 1.03, 3.08, 6.190, 1.493};
// const float motZeros[8] = {2.570, 2.036, 3.777, 3.853, 2.183, 1.556, .675, 2.679}; // RML Ellie
const float motZeros[8] = {5.200, 5.712, 3.777, 3.853, 2.183, 1.556, .675, 2.679}; // RML Ellie
// const float motZeros[8] = {0.631, 4.076, 1.852, 3.414, 1.817, 5.500, 1.078, 6.252}; //RML Odie
#endif

#define TIMESTEPS 42
#define MOTORS 8

enum TBMode
{
	TB_SIT = 0,
	TB_STAND,
};

char myData[32];
float* myData_buf = (float*)myData;

// globals for power monitoring values
float voltage, current;
float oldvoltage, oldcurrent;
float power_int = 0;

#pragma pack(push, 1)
// We receive the serial protocol version number (in case we add more fields later)
// our behaviorCmd, and a checksum.
struct SerialCommandPacket
{
	float voltage, current;
};

const char ALIGNMENT_WORD[2] = {'G', 'R'};

#pragma pack(pop)

// energyOptimalTrotInstantaneousSwitchGSMClearance.mat
float times[TIMESTEPS] = {0.000000,0.010596,0.021192,0.031788,0.042384,0.052980,0.063576,0.074172,0.084768,0.095364,0.105960,0.116556,0.127152,0.137748,0.148344,0.158940,0.169536,0.180132,0.190728,0.201325,0.211921,0.211921,0.222734,0.233547,0.244360,0.255173,0.265986,0.276799,0.287612,0.298425,0.309238,0.320051,0.330864,0.341677,0.352490,0.363303,0.374116,0.384929,0.395743,0.406556,0.417369,0.428182};
float pos[TIMESTEPS][MOTORS] = {{2.495150,1.171640,0.816691,1.835473,1.822380,0.840785,1.136409,2.413746},{2.401600,1.173871,0.804893,1.938859,1.914615,0.837876,1.146171,2.322020},{2.305549,1.171271,0.688457,1.946811,1.908528,0.761168,1.147840,2.226392},{2.207142,1.160856,0.546480,1.839433,1.793108,0.660677,1.144104,2.129860},{2.104008,1.141075,0.420679,1.619903,1.581570,0.566842,1.135042,2.031096},{1.993623,1.113609,0.331586,1.329553,1.326629,0.500827,1.119987,1.926534},{1.873294,1.078183,0.292432,1.006254,1.062537,0.472557,1.097609,1.812848},{1.741221,1.033918,0.300806,0.676978,0.800935,0.474881,1.067283,1.688453},{1.594617,0.978667,0.353711,0.376516,0.563321,0.517168,1.026506,1.550300},{1.431056,0.910328,0.449669,0.150345,0.381889,0.629322,0.972047,1.394946},{1.246192,0.824480,0.591881,0.008125,0.274373,0.815307,0.897911,1.216559},{1.033255,0.711660,0.790397,-0.073326,0.249972,1.058970,0.791870,1.005606},{0.792178,0.567878,1.055797,-0.085255,0.295348,1.339245,0.646956,0.759390},{0.532026,0.397118,1.407637,0.022040,0.383713,1.639512,0.467632,0.486619},{0.318517,0.281484,1.795838,0.224715,0.494355,1.926749,0.341286,0.258714},{0.252956,0.356220,2.132366,0.440860,0.596976,2.151451,0.410887,0.189114},{0.332685,0.614286,2.372423,0.634410,0.691866,2.303521,0.666023,0.272227},{0.470108,0.931410,2.470649,0.791844,0.810001,2.396768,0.971733,0.405205},{0.599623,1.217711,2.449812,0.909599,0.939328,2.436438,1.245931,0.526194},{0.699989,1.447417,2.387128,1.003198,1.047336,2.419294,1.474695,0.626954},{0.774817,1.633375,2.306348,1.056950,1.102539,2.351074,1.666701,0.710278},{0.774917,1.633276,2.306447,1.057049,1.102441,2.350975,1.666659,0.710378},{0.751659,1.739327,2.210847,1.071676,1.117436,2.257786,1.782602,0.701891},{0.613013,1.722302,2.112374,1.077432,1.123905,2.161887,1.778230,0.578636},{0.455991,1.567543,2.012691,1.076795,1.121039,2.063066,1.644368,0.427387},{0.334609,1.285614,1.909462,1.069602,1.108085,1.958402,1.398623,0.290462},{0.275026,0.930091,1.798886,1.055240,1.086414,1.845059,1.109529,0.175672},{0.288007,0.571380,1.677572,1.032034,1.055415,1.720259,0.825831,0.106691},{0.360107,0.293491,1.543338,0.998229,1.013769,1.582083,0.570149,0.125047},{0.481568,0.118434,1.392106,0.949407,0.957056,1.426479,0.361068,0.238985},{0.653062,0.013951,1.218698,0.879478,0.878549,1.247724,0.211882,0.428593},{0.882925,-0.030211,1.017578,0.781891,0.771376,1.040563,0.131913,0.682096},{1.189146,-0.001343,0.781064,0.644141,0.626250,0.799526,0.135459,1.001140},{1.551347,0.095421,0.522041,0.476956,0.455391,0.538884,0.216337,1.360898},{1.926302,0.235188,0.298307,0.351118,0.327222,0.314208,0.352791,1.719108},{2.260379,0.402073,0.206574,0.393426,0.373868,0.226133,0.514006,2.035068},{2.497505,0.590824,0.281921,0.644620,0.641530,0.314991,0.663921,2.268864},{2.632885,0.782034,0.424752,0.965836,0.977472,0.472004,0.795260,2.418690},{2.674721,0.942969,0.550416,1.242322,1.255248,0.601954,0.915309,2.498364},{2.643811,1.060589,0.654307,1.472864,1.479517,0.702108,1.018308,2.518004},{2.579560,1.138931,0.742706,1.668190,1.665737,0.780852,1.095986,2.486830},{2.495249,1.171542,0.816770,1.835573,1.822280,0.840685,1.136328,2.413842}};
float vel[TIMESTEPS][MOTORS] = {{-8.738065,0.336903,6.094251,14.255775,13.464389,4.635790,1.336716,-8.442187},{-8.949531,0.017071,-7.169849,5.272430,3.988762,-4.471729,0.506196,-8.872366},{-9.172762,-0.537908,-13.693032,-3.794714,-5.056831,-9.318087,-0.153388,-9.141253},{-9.466911,-1.442661,-12.854028,-15.932899,-16.076829,-9.425734,-0.592271,-9.163499},{-10.027549,-2.268851,-10.677267,-25.001084,-23.231667,-8.024808,-1.129413,-9.526072},{-10.849464,-2.957709,-6.093126,-29.363315,-24.705488,-4.446780,-1.755625,-10.270684},{-11.867091,-3.734636,-1.288192,-31.257186,-24.923764,-0.905062,-2.474285,-11.210924},{-13.108199,-4.673978,2.865143,-30.305366,-23.996732,1.715880,-3.318781,-12.345151},{-14.572255,-5.772068,7.148892,-25.790708,-20.413051,6.646761,-4.410114,-13.770749},{-16.372871,-7.188617,11.084689,-17.141191,-13.726937,14.296768,-5.968468,-15.666380},{-18.555862,-9.111205,15.916422,-9.920019,-6.491809,20.550980,-8.152672,-18.082385},{-21.513483,-12.143254,21.723955,-4.931712,1.433780,25.069653,-11.849926,-21.651534},{-23.904654,-14.992384,28.560587,3.236417,6.670447,27.484495,-15.527519,-24.775672},{-23.758534,-15.360454,36.395073,15.818858,9.701695,28.454165,-16.369520,-25.165395},{-15.138286,-4.623356,35.386909,21.276467,10.841051,25.061351,-5.565186,-16.344860},{1.718301,17.214664,27.671712,19.442662,8.910966,17.564218,16.996690,1.906391},{12.248213,30.017476,17.144429,16.975630,9.416684,11.382798,29.492248,12.517011},{13.126945,29.173270,2.507536,12.865418,12.276930,6.260046,27.803768,12.266804},{10.792583,24.162491,-5.292053,9.448598,11.565433,1.236783,23.507106,10.291749},{8.211463,19.420701,-6.656093,7.587857,8.258971,-4.234020,19.747437,8.690213},{5.934938,15.867723,-8.673682,1.890595,1.635315,-8.441331,16.606206,7.038184},{5.834985,15.767789,-8.708780,1.790605,1.735288,-8.530592,16.705778,6.938230},{-8.795508,3.998311,-8.989942,0.912631,0.999263,-8.740753,4.963698,-7.283852},{-15.544233,-7.033484,-9.203460,0.186275,0.194974,-8.995270,-5.578636,-14.326087},{-13.169993,-20.875716,-9.324447,-0.348861,-0.744367,-9.362077,-18.351036,-13.484836},{-8.989371,-30.592031,-9.822721,-0.990754,-1.634306,-10.039408,-26.309250,-11.713232},{-2.090815,-34.093916,-10.692264,-1.717367,-2.420786,-10.984300,-26.821910,-9.023089},{4.395766,-31.217994,-11.771958,-2.590527,-3.323187,-12.121990,-25.345315,-3.207511},{8.929253,-20.566111,-13.144182,-3.756992,-4.479926,-13.525913,-21.717022,6.347914},{13.561544,-12.211206,-14.879145,-5.333084,-6.073635,-15.309110,-16.758417,14.492603},{18.360095,-6.991865,-17.265488,-7.671421,-8.532064,-17.815167,-10.731051,20.518311},{24.324923,-1.088726,-19.968657,-10.484976,-11.341141,-20.527117,-3.920526,26.345001},{31.595944,6.120215,-23.343336,-14.544576,-15.054200,-23.624429,4.237978,32.031717},{34.713376,11.436421,-24.168621,-15.966103,-16.137451,-24.189978,10.418183,33.840177},{33.709317,14.298305,-15.916646,-5.601827,-5.667240,-15.911768,14.290794,31.796602},{27.188415,16.421199,0.283426,15.171100,16.160882,1.039055,15.031791,25.989691},{16.946335,18.014510,11.854621,28.894012,30.630913,13.368502,12.866360,17.480766},{8.402173,16.910739,12.802269,28.091201,28.753332,13.674195,11.561596,10.493500},{-0.063506,12.853800,10.511740,23.261997,22.921836,10.485252,10.493673,4.402130},{-5.089456,8.929707,8.811743,19.559486,18.820041,8.197697,8.373021,-0.574106},{-6.820925,5.347298,7.513038,16.685947,15.721101,6.371493,5.728277,-4.988861},{-8.816820,0.436865,6.194186,14.355200,13.364962,4.735728,1.436666,-8.342289}};
float u[TIMESTEPS][MOTORS] = {{-0.105027,0.442183,-0.859919,-0.563606,-0.671495,-0.573344,0.147362,-0.039184},{-0.105027,0.442183,-0.859919,-0.563606,-0.671495,-0.573344,0.147362,-0.039184},{-0.092219,0.279376,0.265305,-0.885707,-0.764467,0.181906,0.345630,-0.055248},{-0.092219,0.279376,0.265305,-0.885707,-0.764467,0.181906,0.345630,-0.055248},{-0.045495,0.335790,0.250298,-0.178907,-0.031001,0.169967,0.309098,-0.031287},{-0.045495,0.335790,0.250298,-0.178907,-0.031001,0.169967,0.309098,-0.031287},{-0.027982,0.348551,0.109812,0.082685,0.075496,0.072851,0.395290,-0.012311},{-0.027982,0.348551,0.109812,0.082685,0.075496,0.072851,0.395290,-0.012311},{-0.001787,0.429496,0.079850,0.356176,0.238654,0.247845,0.356309,0.028833},{-0.001787,0.429496,0.079850,0.356176,0.238654,0.247845,0.356309,0.028833},{0.073687,0.731196,0.213197,0.168496,0.255996,0.147167,0.621209,0.154392},{0.073687,0.731196,0.213197,0.168496,0.255996,0.147167,0.621209,0.154392},{0.404612,1.551755,0.280065,0.386908,-0.064607,0.031639,1.416604,0.776591},{0.404612,1.551755,0.280065,0.386908,-0.064607,0.031639,1.416604,0.776591},{1.256101,1.375517,-0.364918,-0.246513,-0.324750,-0.506087,1.264826,1.465545},{1.256101,1.375517,-0.364918,-0.246513,-0.324750,-0.506087,1.264826,1.465545},{1.673177,0.758297,-1.280696,-0.290248,0.101755,-0.537634,0.413873,1.822545},{1.673177,0.758297,-1.280696,-0.290248,0.101755,-0.537634,0.413873,1.822545},{1.044644,0.039316,-0.146882,-0.359787,-0.308465,-0.553055,0.064798,1.052175},{1.044644,0.039316,-0.146882,-0.359787,-0.308465,-0.553055,0.064798,1.052175},{-0.134535,-0.134098,-0.014688,-1.103734,-1.130031,0.016667,-0.133560,-0.133393},{-0.831767,-0.690303,-0.047154,0.203517,0.127149,-0.033928,-0.672417,-0.801306},{-0.831767,-0.690303,-0.047154,0.203517,0.127149,-0.033928,-0.672417,-0.801306},{0.372955,-0.839196,-0.029101,0.062189,0.169542,-0.037396,-0.777490,0.233346},{0.372955,-0.839196,-0.029101,0.062189,0.169542,-0.037396,-0.777490,0.233346},{0.285146,-0.102474,-0.030977,0.073584,0.117123,-0.032375,0.039133,0.141200},{0.285146,-0.102474,-0.030977,0.073584,0.117123,-0.032375,0.039133,0.141200},{0.068547,0.446518,-0.033578,0.026889,0.033006,-0.036120,0.112944,0.344138},{0.068547,0.446518,-0.033578,0.026889,0.033006,-0.036120,0.112944,0.344138},{0.158524,0.183274,0.005684,0.231836,0.219965,-0.004674,0.210893,0.187241},{0.158524,0.183274,0.005684,0.231836,0.219965,-0.004674,0.210893,0.187241},{0.274621,0.177988,0.299147,0.987240,1.011677,0.249158,0.236460,0.189238},{0.274621,0.177988,0.299147,0.987240,1.011677,0.249158,0.236460,0.189238},{0.024363,-0.062436,1.053148,1.291518,1.396122,0.888945,-0.000756,-0.081343},{0.024363,-0.062436,1.053148,1.291518,1.396122,0.888945,-0.000756,-0.081343},{-0.750166,-0.025250,1.843834,1.112271,1.333019,1.751446,-0.372106,-0.541696},{-0.750166,-0.025250,1.843834,1.112271,1.333019,1.751446,-0.372106,-0.541696},{-0.858557,-0.259725,1.255653,0.200797,0.260864,1.181743,-0.074091,-0.605778},{-0.858557,-0.259725,1.255653,0.200797,0.260864,1.181743,-0.074091,-0.605778},{-0.111405,-0.451850,0.871133,0.043818,0.080385,0.826644,-0.271962,-0.449304},{-0.111405,-0.451850,0.871133,0.043818,0.080385,0.826644,-0.271962,-0.449304},{-0.000473,-0.728441,-0.118814,-0.098143,-0.087985,-0.113368,-0.721617,-0.031672}};
float dfVec[TIMESTEPS][MOTORS] = {{-0.088002,0.088923,-0.120793,0.000097,-0.027077,-0.076115,0.039093,-0.072863},{-0.089635,0.086452,-0.223254,-0.069296,-0.100274,-0.146468,0.032678,-0.076186},{-0.088859,0.050383,-0.053983,-0.202216,-0.188298,-0.036469,0.066287,-0.081399},{-0.091132,0.043394,-0.047502,-0.295980,-0.273424,-0.037300,0.062897,-0.081570},{-0.086341,0.048025,-0.033617,-0.228051,-0.185509,-0.028809,0.051616,-0.079694},{-0.092690,0.042704,0.001794,-0.261748,-0.196894,-0.001170,0.046779,-0.085446},{-0.097132,0.039193,0.011486,-0.225311,-0.177791,0.007230,0.058053,-0.089004},{-0.106719,0.031937,0.043569,-0.217958,-0.170630,0.027476,0.051530,-0.097766},{-0.112915,0.039256,0.070811,-0.129695,-0.111096,0.099727,0.035490,-0.100746},{-0.126824,0.028314,0.101214,-0.062880,-0.059448,0.158821,0.023452,-0.115389},{-0.128954,0.072359,0.164569,-0.043736,-0.000173,0.187479,0.058292,-0.109541},{-0.151800,0.048937,0.209430,-0.005203,0.061050,0.222385,0.029732,-0.137112},{-0.105670,0.187114,0.275295,0.100530,0.038915,0.218486,0.156597,-0.039783},{-0.104541,0.184270,0.335814,0.197726,0.062330,0.225976,0.150092,-0.042793},{0.128271,0.232807,0.202116,0.116231,0.020348,0.094796,0.203923,0.159837},{0.258483,0.401499,0.142518,0.102066,0.005438,0.036883,0.378207,0.300822},{0.421242,0.379907,-0.117575,0.074471,0.092605,-0.017025,0.308613,0.452478},{0.428030,0.373385,-0.230641,0.042721,0.114700,-0.056597,0.295570,0.450545},{0.287299,0.194323,-0.069553,0.002752,0.029123,-0.098411,0.194235,0.284901},{0.267361,0.157694,-0.080090,-0.011622,0.003581,-0.140671,0.165192,0.272529},{0.019582,0.096396,-0.069869,-0.200861,-0.207966,-0.061953,0.102205,0.028328},{-0.117300,-0.012956,-0.076478,0.053561,0.038226,-0.072520,-0.002219,-0.102831},{-0.230316,-0.103872,-0.078650,0.046779,0.032540,-0.074143,-0.092923,-0.212692},{-0.047268,-0.218155,-0.076775,0.013579,0.034603,-0.076786,-0.194871,-0.065112},{-0.028928,-0.325082,-0.077709,0.009445,0.027347,-0.079619,-0.293534,-0.058614},{-0.013775,-0.256319,-0.081925,0.006711,0.010240,-0.083871,-0.195592,-0.062917},{0.039514,-0.283370,-0.088642,0.001099,0.004164,-0.091170,-0.199552,-0.042136},{0.047337,-0.153983,-0.097490,-0.014762,-0.019227,-0.100690,-0.173737,0.042404},{0.082357,-0.071700,-0.108090,-0.023773,-0.028163,-0.111535,-0.145709,0.116216},{0.135705,-0.058550,-0.113827,0.004061,-0.003977,-0.119171,-0.088284,0.148503},{0.172772,-0.018232,-0.132261,-0.014002,-0.022967,-0.138529,-0.041725,0.195050},{0.241513,0.026336,-0.095854,0.111730,0.109887,-0.109926,0.015876,0.240449},{0.297679,0.082023,-0.121922,0.080371,0.081205,-0.133852,0.078898,0.284377},{0.272906,0.076154,0.018895,0.128790,0.147887,-0.013325,0.080330,0.245526},{0.265150,0.098262,0.082639,0.208851,0.228766,0.050622,0.110245,0.229740},{0.063579,0.121920,0.362133,0.334324,0.385063,0.349934,0.043475,0.095016},{-0.015538,0.134227,0.451517,0.440329,0.496839,0.445176,0.026748,0.029287},{-0.102699,0.079928,0.344015,0.256194,0.273035,0.336323,0.074846,-0.037198},{-0.168094,0.048590,0.326322,0.218890,0.227989,0.311689,0.066597,-0.084252},{-0.061062,-0.019229,0.238126,0.159645,0.161071,0.224698,0.011588,-0.092146},{-0.074437,-0.046902,0.228094,0.137448,0.137133,0.210591,-0.008842,-0.126248},{-0.068200,-0.138828,0.024654,0.091731,0.086064,0.014451,-0.129772,-0.070624}};


class TrajBound : public ReorientableBehavior
{
public:
	Interpolator interp;

	TBMode mode = TB_SIT; //Current state within state-machine
	int logging = 0;

	uint32_t tLast; //int used to store system time at various events

	float extDes; //The desired leg extension
	float angDes; // The desired leg angle
	float t;
	uint32_t tOld;
	uint32_t tNew;
	uint32_t timeStep;
	uint32_t iter = 0;

	bool boolSlow = false;

	float posDes[MOTORS];
	float velDes[MOTORS];
	float uDes[MOTORS];
	float df[MOTORS];
	float dfDes[MOTORS];
	float posAct;
	float velAct;
	float kp = 0.8;
	float kd = 0.020; // 0.02
	float kpy = 0.1;	//0.1;
	float kdy = 0;		//0.05;
	float kiy = 0.02;
	float V = 15;
	float R = 0.23;
	float kt = 0.0954;
	float yawErrorInt = 0;

	float yawInit;
	float yawDes;
	float turnLeft;

	float finalTime = times[TIMESTEPS - 1];

	// Parser state (for serial comms with raspi)
	// Goes from 0 to 1 to 2
	int numAlignmentSeen = 0;
	uint16_t rxPtr = 0;

	// Receive buffer and alignment
	const static uint16_t RX_BUF_SIZE = 100;
	SerialCommandPacket packet;

	//sig is mapped from remote; here, 3 corresponds to pushing the left stick to the right
	// which in turn forces the state machine into FH_LEAP
	void signal(uint32_t sig)
	{
		// tLast = S->millis;
		if (logging == 0) power_int = 0;
		logging = 1;
	}

	void begin()
	{
		mode = TB_STAND;			// Start behavior in STAND mode
		tLast = S->millis;		// Record the system time @ this transition
		yawInit = S->imu.euler.z;
		yawErrorInt = 0;
		power_int = 0;
		// ioctl(LOGGER_FILENO, 0);//stop
	}

	void update()
	{
		tOld = tNew;
		tNew = clockTimeUS;
		timeStep = tNew - tOld;
		// if (tNew!=clockTimeUS)
		// {
		// 	tOld = tNew;
		// 	tNew = clockTimeUS;
		// 	timeStep = tNew - tOld;
		// }


		// Serial comms code
		oldvoltage = voltage;
		oldcurrent = current;

		// Character to store the latest received character
		uint8_t latestRX;

		// Loop through while there are new bytes available
		while (read(SERIAL_AUX_FILENO, &latestRX, 1) > 0)
		{
			if (numAlignmentSeen == 0 && latestRX == ALIGNMENT_WORD[0])
			{
				numAlignmentSeen = 1;
			}
			else if (numAlignmentSeen == 1 && latestRX == ALIGNMENT_WORD[1])
			{
				numAlignmentSeen = 2;
				rxPtr = 0;
			}
			else if (numAlignmentSeen == 2)
			{
				// Add the next byte to our memory space in serial_packet
				uint8_t *pSerialPacket = (uint8_t *)&packet;
				pSerialPacket[rxPtr++] = latestRX; // post-increment rxPtr

				// Check if we have read a whole packet
				if (rxPtr == sizeof(SerialCommandPacket))
				{
					// Copy voltage and current readings
					voltage = packet.voltage;
					current = packet.current;

					// Reset
					numAlignmentSeen = rxPtr = 0;
				}
			}
		}

		if (isReorienting())
			return;

		for (int j = 0; j < MOTORS; j++)
		{
			posDes[j] = 0;
			velDes[j] = 0;
			uDes[j] = 0;
			df[j] = 0;
		}

		if (mode == TB_SIT)
		{


			C->mode = RobotCommand_Mode_JOINT;
			for (int i = 0; i < P->joints_count; i++)
			{
				// int ii;
				// if (i==0)
				// {
				// 	ii = 1;
				// } else if (i == 1) {
				// 	ii = 0;
				// } else {
				// 	ii = i;
				// }

				posDes[i] = 0.5;
				// Splay angle for the front/rear legs (outward splay due to fore-displacement of front legs
				// and aft-displacement of rear legs)
				// The pitch angle (S->imu.euler.y) is subtracted since we want to the set the *absolute* leg angle
				// and limb[i].setPosition(ANGLE, *) will set the angle of the leg *relative* to the robot body
				if(i==1 || i==3 || i==4 || i==6)
				{
					posDes[i] = posDes[i] - S->imu.euler.y;
				} else if(i==0 || i==2 || i==5 || i==7)
				{
					posDes[i] = posDes[i] + S->imu.euler.y;
				}

				joint[i].setGain(0.4, .003);
				joint[i].setPosition(posDes[i]);
			}
		}
		else if (mode == TB_STAND)
		{
			if (voltage<10)
			{
				voltage = oldvoltage;
				current = oldcurrent;
			}
			power_int = power_int + 0.000001*timeStep*(voltage + oldvoltage)*0.5*(current + oldcurrent)*0.5;

			C->mode = RobotCommand_Mode_JOINT;

			t = 0.00001 * (100 * (S->millis - tLast) % (int)(100000 * finalTime));

			int index = 0;
			for (int j = 0; j < TIMESTEPS; j++)
			{
				if (times[j] <= t && t < times[j + 1])
				{
					index = j;
				}
			}

			interp.getMultipleCubicSplineInterp(pos, vel, times, t, posDes);
			interp.getMultipleLinearInterp(vel, times, t, velDes);
			// interp.getMultipleZOH(u, times, t, uDes);
			interp.getMultipleZOH(dfVec, times, t, dfDes);

			for (int i = 0; i < MOTORS; ++i)
			{

				// int ii;
				// if (i==0)
				// {
				// 	ii = 1;
				// } else if (i == 1) {
				// 	ii = 0;
				// } else {
				// 	ii = i;
				// }
				// joint[i].setGain(0.8);

				// yawDes = yawInit + 0;
				// yawErrorInt = yawErrorInt + 0.001 * (yawDes - S->imu.euler.z);
				// turnLeft = kpy*(yawDes - S->imu.euler.z) + kdy*(-S->imu.angular_velocity.z) + 0.1;
				turnLeft = -map(C->behavior.twist.angular.z, -1.0, 1.0, -0.1, 0.1) - 0.03;

				if (i == 0 || i == 2 || i == 4 || i == 6)
				{
					posDes[i] = posDes[i] - turnLeft;
				}
				else if (i == 1 || i == 3 || i == 5 || i == 7)
				{
					posDes[i] = posDes[i] + turnLeft;
				}

				// if(i==1 || i==3 || i==4 || i==6)
				// {
				// 	posDes[i] = posDes[i] - S->imu.euler.y;
				// } else if(i==0 || i==2 || i==5 || i==7)
				// {
				// 	posDes[i] = posDes[i] + S->imu.euler.y;
				// }

				posAct = joint[i].getPosition();
				velAct = joint[i].getVelocity();

				// df[i] = 1 / (0.95 * V) * (uDes[i] * R / kt + kt * joint[i].getVelocity());
				joint[i].setOpenLoop(dfDes[i] + kp * (posDes[i] - posAct) + kd * (velDes[i] - velAct));
			}
		}
	}

	bool running()
	{
		return false;
	}
	void end()
	{
		mode = TB_SIT;
		logging = 0;
	}
};

TrajBound trajBound;

void debug()
{
	// printf("loop: ");
	// printf("%d, ", trajBound.mode);
	// printf("pos command: %4.3f, %4.3f, %4.3f, %4.3f, %4.3f, %4.3f, %4.3f, %4.3f. ",
	// 	trajBound.uDes[0],trajBound.uDes[1],trajBound.uDes[2],trajBound.uDes[3],trajBound.uDes[4],trajBound.uDes[5],trajBound.uDes[6],trajBound.uDes[7]);
	// printf("Time: %4.3fs. ", trajBound.t);
	// printf("%4.3f, %4.3f, %4.3f ", trajBound.yawInit, trajBound.turnLeft, trajBound.kiy * trajBound.yawErrorInt);
	// printf("test1, test2: %4.3f, %4.3f.", trajBound.test1,trajBound.test2);
	// printf("Voltage: %6.3f, Current: %6.3f", voltage,  current);

	// for (int i = 0; i < P->joints_count; i++)
	// {
	// 	printf("Motor %d, Pos: %4.3f, ", i, joint[i].getRawPosition());
	// }

	printf("Power Int: %6.2f, Voltage: %5.2f, Current: %5.2f", power_int, voltage, current);
	printf("\n");

	myData_buf[0] = trajBound.logging;
	myData_buf[1] = voltage;
	myData_buf[2] = current;
	myData_buf[3] = power_int;
	write(LOGGER_FILENO, myData, 32);
}

int main(int argc, char *argv[])
{
#if defined(ROBOT_MINITAUR)
	init(RobotParams_Type_MINITAUR, argc, argv);
	for (int i = 0; i < P->joints_count; ++i)
		P->joints[i].zero = motZeros[i]; //Add motor zeros from array at beginning of file
#elif defined(ROBOT_MINITAUR_E)
	init(RobotParams_Type_MINITAUR_E, argc, argv);
	JoyType joyType = JoyType_FRSKY_XSR;
	ioctl(JOYSTICK_FILENO, IOCTL_CMD_JOYSTICK_SET_TYPE, &joyType);
#else
#error "Define robot type in preprocessor"
#endif


	// Uncomment to clear Bound and Walk behaviors
	// behaviors.clear();
	
	behaviors.push_back(&trajBound);

	setDebugRate(100);
	safetyShutoffEnable(false);

	SerialPortConfig cfg;
	cfg.baud = 115200;
	cfg.mode = SERIAL_8N1;
	ioctl(STDOUT_FILENO, IOCTL_CMD_SERIAL_PORT_CFG, &cfg);


	// Run
	return begin();
}